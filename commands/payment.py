import re
from datetime import datetime as dt

from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher.storage import FSMContext
from aiogram.utils.exceptions import BotKicked, BadRequest
from loguru import logger

from objects.globals import dp, config, bot
from keyboards.keyboards import S_CURR_COUPLE, PaymentKB, StartKB
from models.models import *
from utils.converter import is_int
from commands import start, attach_receipt


@dp.callback_query_handler(lambda query: query.data.startswith(("payment")))
async def payment(query: CallbackQuery, state: FSMContext):
    payment_method = re.sub("payment_", "", query.data)
    await state.update_data(method=payment_method)
    if payment_method == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
        await query.message.edit_text(text="–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:")
        return await state.set_state("get_technical_task")
    await query.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    return await state.set_state("get_amount")


@dp.message_handler(state="get_amount")
async def get_amount(message: Message, state: FSMContext):
    if not is_int(message.text):
        return await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
    elif int(message.text) < 1:
        return await message.answer(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–Ω–æ –µ–¥–∏–Ω–∏—Ü–µ!")
    await state.update_data(amount=message.text)
    data = await state.get_data()
    send = data.get("send")
    receive = data.get("receive")
    method = data.get("method")
    amount = data.get("amount")
    user = await User.objects.get(user_id=message.from_user.id)
    deal = Deal.objects.filter(
        user=user, send=send, receive=receive, method=method, amount=amount)
    if await deal.exists():
        deal = list(await deal.all())[-1]
        if not deal.is_cancel:
            return await message.answer(text="–¢–∞–∫–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ...")
        else:
            await create_deal(message, state, user, send, receive, method, amount, content=None, is_technical_task=False)
    else:
        await create_deal(message, state, user, send, receive, method, amount, content=None, is_technical_task=False)


@dp.message_handler(state="get_technical_task")
async def get_technical_task(message: Message, state: FSMContext, amount=0.0):
    content = message.text
    user = await User.objects.get(user_id=message.from_user.id)
    data = await state.get_data()
    send = data.get("send")
    receive = data.get("receive")
    method = data.get("method")
    await create_deal(message=message, state=state, user=user, send=send, receive=receive, method=method, amount=amount, is_technical_task=True, content=content)


@dp.message_handler(lambda message: message.chat.type == "group")
async def listen_admin_msg(message: Message, user_id = None):
    message_split = re.split(r"\n", message.reply_to_message.text)
    if len(message_split) > 1:
        user_id = re.sub("üë§User ID: ", "", message_split[1])
    if user_id:
        try:
            try:
                if "!pay" in message.text:
                    link = message.text
                    res = re.search("(?P<url>https?://[^\s]+)", link)
                    if res:
                        link = res.group("url")
                        link_page = (
                            F"üîó–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É: {link}\n"
                            F"‚ùóÔ∏è–°—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç 5 –º–∏–Ω—É—Ç."
                        )
                        await bot.send_message(chat_id=user_id, text=link_page, reply_markup=PaymentKB.receipt())
                        return await message.answer(text="–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.")
                else:
                    await bot.send_message(chat_id=user_id, text=message.text)
            except BadRequest as e:
                logger.error(e)
        except IndexError:
            await bot.send_message(chat_id=user_id, text=message.text, reply_to_message_id=message.reply_to_message.message_id - 1)


@dp.message_handler(lambda message: message.chat.type == "private")
async def listen_private_msg(message: Message):
    message_page = (
        F"üìç<b>ID –∑–∞—è–≤–∫–∏:</b> –±–µ–∑ –∑–∞—è–≤–∫–∏\n"
        F"üë§<b>User ID:</b> {message.from_user.id}\n"
        F"üîóUsername: @{message.from_user.username}\n"
        f"‚úâÔ∏è<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}"
    )
    try:
        await bot.send_message(chat_id=config.group_id, text=message_page, reply_to_message_id=message.reply_to_message.message_id - 1)
    except AttributeError:
        return await bot.send_message(chat_id=config.group_id, text=message_page)


@dp.message_handler(lambda message: message.chat.type == "group", content_types=["photo"])
async def listen_admin_photo(message: Message, state: FSMContext):
    try:
        deal_id = re.split("#", re.split(
            "\n", message.reply_to_message.caption)[0])[1]
        user_id = re.split(":", re.split("\n", message.reply_to_message.caption)[1])[1].replace(" ", "")
        path = rf"media/receipt/admins/{message.from_user.id}/deal_{deal_id}.jpg"
        await message.photo[-1].download(path)
        with open(path, "rb") as f:
            photo = f.read()
            f.close()
        await bot.send_photo(chat_id=user_id, photo=photo, caption=f"<b>–ß–µ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. (–ê–Ω–∫–µ—Ç–∞ #{deal_id})</b>",
                             reply_to_message_id=message.reply_to_message.message_id + 1)
        await finish_deal(message, state, deal_id)
        return await message.answer(text="–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except IndexError:
        return await message.answer(text="–ù–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç—á–∞—Ç—å!")
    except TypeError:
        return await message.answer(text="–ù—É–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Å—Å—ã–ª–∫—É!")


@dp.callback_query_handler(lambda query: query.data.startswith(("receipt")))
async def get_receipt(query: CallbackQuery, state: FSMContext):
    deal_id = re.sub("receipt_", "", query.data)
    await state.update_data(deal_id=deal_id)
    await query.message.edit_text(text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
    return await state.set_state("get_receipt")


@dp.message_handler(content_types=["photo"], state="get_receipt")
async def read_user_receipt(message: Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data.get("deal_id")
    path = rf"media/receipt/users/{message.from_user.id}/deal_{deal_id}.jpg"
    await message.photo[-1].download(path)
    with open(path, "rb") as f:
        photo = f.read()
        f.close()
    photo_caption = (
        f"<b>–ß–µ–∫ –∞–Ω–∫–µ—Ç—ã #{deal_id}</b>\n"
        f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}</b>"
    )
    await bot.send_photo(chat_id=config.group_id, photo=photo, caption=photo_caption)
    await message.answer(text="–û–∂–∏–¥–∞–π—Ç–µ —á–µ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ...")
    return await state.set_state("message")


async def create_deal(message: Message, state: FSMContext, user: User, send: str, receive: str, method: str, amount: float, content: str, is_technical_task: bool):
    await state.finish()
    is_chat = await User.objects.filter(user_id=message.from_user.id).update(is_chat=True)
    deal = await Deal.objects.create(user=user, send=send, receive=receive, method=method, amount=amount)
    await state.update_data(deal_id=deal.id)
    if is_technical_task:
        technical_task = await TechnicalTask.objects.create(deal=deal, content=content)
        deal_page = (
            F"üìå<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ #{deal.pk}</b>\n"
            F"üë§<b>User ID:</b> {message.from_user.id}\n"
            F"üîóUsername: @{message.from_user.username}\n"
            F"‚öôÔ∏è–û–±–º–µ–Ω: {S_CURR_COUPLE.get(send)} ‚ûú {S_CURR_COUPLE.get(receive)}\n"
            F"üí≥–ú–µ—Ç–æ–¥: {method}\n"
            F"üìÉ–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: <code>{content}</code>"
        )
    else:
        deal_page = (
            F"üìå<b>–ù–æ–≤–∞—è –∞–Ω–∫–µ—Ç–∞ #{deal.pk}</b>\n"
            F"üë§<b>User ID:</b> {message.from_user.id}\n"
            F"üîóUsername: @{message.from_user.username}\n"
            F"‚öôÔ∏è–û–±–º–µ–Ω: {S_CURR_COUPLE.get(send)} ‚ûú {S_CURR_COUPLE.get(receive)}\n"
            F"üí≥–ú–µ—Ç–æ–¥: {method}\n"
            F"üí∞–°—É–º–º–∞: {amount}"
        )
    try:
        await bot.send_message(config.group_id, deal_page)
        await message.answer(text=f"–ê–Ω–∫–µ—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n"
                             f"–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")
        return await state.set_state("message")
    except BotKicked:
        logger.error(f"Bot kicked from chat: {config.group_id}")
        return await message.answer(text="–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ...")


async def finish_deal(message: Message, state: FSMContext, deal_id):
    await state.finish()
    user = await User.objects.get(user_id=message.from_user.id)
    await user.update(is_chat=False)
    deal = await Deal.objects.get(id=deal_id)
    await deal.update(finished=dt.utcnow())
    await bot.send_message(chat_id=message.from_user.id, text="–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!", reply_markup=StartKB.start_keyboard())


@dp.message_handler(state="message")
async def chat(message: Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data.get("deal_id")
    message_page = (
        f"üìç<b>ID –∑–∞—è–≤–∫–∏:</b> {deal_id}\n"
        F"üë§<b>User ID:</b> {message.from_user.id}\n"
        F"üîóUsername: @{message.from_user.username}\n"
        f"‚úâÔ∏è<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}"
    )
    await bot.send_message(chat_id=config.group_id, text=message_page)
