import re
from datetime import datetime as dt

from aiogram.types import CallbackQuery, Message
from aiogram.dispatcher.storage import FSMContext
from aiogram.utils.exceptions import BotKicked, BadRequest
from loguru import logger

from objects.globals import dp, config, bot
from keyboards.keyboards import S_CURR_COUPLE, PaymentKB, StartKB
from models.models import *
from utils.converter import is_int
from utils.deal import get_deal
from utils.file import read_local_file
from commands import start, attach_receipt


@dp.callback_query_handler(lambda query: query.data.startswith(("s_payment")))
async def s_payment(query: CallbackQuery, state: FSMContext):
    payment_method = re.sub("s_payment_", "", query.data)
    await state.update_data(method=payment_method)
    if payment_method == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ":
        await query.message.edit_text(text="–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ:")
        return await state.set_state("get_technical_task")
    await query.message.edit_text(text="–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:")
    return await state.set_state("get_amount")


@dp.callback_query_handler(lambda query: query.data.startswith(("r_payment")))
async def r_payment(query: CallbackQuery, state: FSMContext):
    payment_method = re.sub("r_payment_", "", query.data)
    data = await state.get_data()
    deal_id = data.get("deal_id")
    message_page = (
        f"üìç<b>ID –∑–∞—è–≤–∫–∏:</b> {deal_id}\n"
        F"üë§<b>User ID:</b> {query.from_user.id}\n"
        F"üîóUsername: @{query.from_user.username}\n"
        f"‚úâÔ∏è<b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> {payment_method}"
    )
    await bot.send_message(chat_id=config.main_group_id, text=message_page)
    await query.message.answer(text="–û–∂–∏–¥–∞–π—Ç–µ —á–µ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ...\n"
                               "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")
    return await state.set_state("message")


@dp.message_handler(state="get_amount")
async def get_amount(message: Message, state: FSMContext):
    if not is_int(message.text):
        return await message.answer(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!")
    elif int(message.text) < 1:
        return await message.answer(text="–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∫—Ä–∞—Ç–Ω–æ –µ–¥–∏–Ω–∏—Ü–µ!")
    await state.update_data(amount=message.text)
    data = await state.get_data()
    send = data.get("send")
    receive = data.get("receive")
    method = data.get("method")
    amount = data.get("amount")
    user = await User.objects.get(user_id=message.from_user.id)
    deal = Deal.objects.filter(
        user=user, send=send, receive=receive, method=method, amount=amount)
    if await deal.exists():
        deal = list(await deal.all())[-1]
        if not deal.finished and not deal.is_cancel:
            return await message.answer(text="–¢–∞–∫–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ...\n"
                                        "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞—è–≤–∫–∏.")
        else:
            await create_deal(message, state, user, send, receive, method, amount, content=None,
                              is_technical_task=False)
    else:
        await create_deal(message, state, user, send, receive, method, amount, content=None, is_technical_task=False)


@dp.message_handler(state="get_technical_task")
async def get_technical_task(message: Message, state: FSMContext, amount=0.0):
    content = message.text
    user = await User.objects.get(user_id=message.from_user.id)
    data = await state.get_data()
    send = data.get("send")
    receive = data.get("receive")
    method = data.get("method")
    await create_deal(message=message, state=state, user=user, send=send, receive=receive,
                      method=method, amount=amount, is_technical_task=True, content=content)


@dp.message_handler(lambda message: message.chat.type in ("group", "supergroup",))
async def listen_admin_msg(message: Message, user_id=None):
    message_split = re.split(r"\n", message.reply_to_message.text)
    if len(message_split) > 1:
        user_id = re.sub("üë§User ID: ", "", message_split[1])
    if user_id:
        try:
            await bot.send_message(chat_id=user_id, text=message.text)
        except BadRequest as e:
            logger.error(e)
        except Exception as e:
            logger.error(e)


@dp.message_handler(lambda message: message.chat.type == "private")
async def listen_private_msg(message: Message):
    message_page = (
        F"üìç<b>ID –∑–∞—è–≤–∫–∏:</b> –±–µ–∑ –∑–∞—è–≤–∫–∏\n"
        F"üë§<b>User ID:</b> {message.from_user.id}\n"
        F"üîóUsername: @{message.from_user.username}\n"
        f"‚úâÔ∏è<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}"
    )
    try:
        await bot.send_message(chat_id=config.main_group_id, text=message_page)
    except AttributeError:
        return await bot.send_message(chat_id=config.main_group_id, text=message_page)


@dp.message_handler(lambda message: message.chat.type in ("group", "supergroup",), content_types=["photo", "document"])
async def listen_admin_photo(message: Message, state: FSMContext):
    try:
        deal_id = re.split("#", re.split(
            "\n", message.reply_to_message.caption)[0])[1]
        user_id = re.split(":", re.split("\n", message.reply_to_message.caption)[1])[1].replace(" ", "")
        deal = await Deal.objects.get(id=deal_id)
        if deal:
            caption = f"<b>–ß–µ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. (–ó–∞—è–≤–∫–∞ #{deal_id})</b>"
            if message.photo:
                file_id = message.photo[1].file_id
                unique_id = message.photo[1].file_unique_id
                mime_type = "image/png;image/jpeg"
            else:
                file_id = message.document.file_id
                unique_id = message.document.file_unique_id
                mime_type = message.document.mime_type
            file = await bot.get_file(file_id)
            file_path = file.file_path
            ext = mime_type.split("/")[1]
            local_path = rf"media/receipt/admins/{message.from_user.id}/{unique_id}.{ext}"
            await bot.download_file(file_path, local_path)
            document = read_local_file(local_path)
            if mime_type == "application/pdf":
                await bot.send_document(chat_id=user_id, document=document, caption=caption)
            elif mime_type in ["image/png", "image/jpeg", "image/png;image/jpeg"]:
                await bot.send_photo(chat_id=user_id, photo=document, caption=caption)
            await File.objects.create(deal=deal, title=unique_id, path=file_path, type=mime_type,
                                      is_member=False)
            return await finish_deal(message, state, deal_id)
    except IndexError:
        return await message.answer(text="–ù–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–≤–µ—Ç—á–∞—Ç—å!")
    except TypeError:
        return await message.answer(text="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")


@dp.callback_query_handler(lambda query: query.data.startswith(("receipt")))
async def get_receipt(query: CallbackQuery, state: FSMContext):
    deal_id = re.sub("receipt_", "", query.data)
    await state.update_data(deal_id=deal_id)
    await query.message.edit_text(text="–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —á–µ–∫–∞:")
    return await state.set_state("get_receipt")


@dp.message_handler(state="get_receipt", content_types=["photo", "document"])
async def read_user_receipt(message: Message, state: FSMContext):
    deal = await get_deal(message.from_user.id)
    if deal:
        data = await state.get_data()
        caption = (
            f"<b>–ß–µ–∫ –∞–Ω–∫–µ—Ç—ã #{deal.id}</b>\n"
            f"<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b> {message.from_user.id}\n\n"
            f"<b>‚ùóÔ∏è–ü–æ–¥—Å–∫–∞–∑–∫–∞</b>: <i>–û—Ç–≤–µ—Ç–Ω—ã–π —á–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–≤–µ—Ç–Ω—ã–º –∫ —ç—Ç–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é</i>"
        )
        if message.photo:
            file_id = message.photo[1].file_id
            unique_id = message.photo[1].file_unique_id
            mime_type = "image/png;image/jpeg"
        else:
            file_id = message.document.file_id
            unique_id = message.document.file_unique_id
            mime_type = message.document.mime_type
        file = await bot.get_file(file_id)
        file_path = file.file_path
        ext = mime_type.split("/")[1]
        local_path = rf"media/receipt/users/{message.from_user.id}/{unique_id}.{ext}"
        await bot.download_file(file_path, local_path)
        document = read_local_file(local_path)
        if mime_type == "application/pdf":
            await bot.send_document(chat_id=config.main_group_id, document=document, caption=caption)
        elif mime_type in ["image/png", "image/jpeg", "image/png;image/jpeg"]:
            await bot.send_photo(chat_id=config.main_group_id, photo=document, caption=caption)
        await File.objects.create(deal=deal, title=unique_id, path=file_path, type=mime_type,
                                  is_member=True)
        await message.answer(text="–ö—É–¥–∞ –≤–∞–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å?", reply_markup=PaymentKB(data).receive_payment_keyboard())
        # return await state.set_state("receive")
        return await state.reset_state(with_data=False)

@dp.message_handler(state="receive")
async def read_user_receive(message: Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data.get("deal_id")
    message_page = (
        f"üìç<b>ID –∑–∞—è–≤–∫–∏:</b> {deal_id}\n"
        F"üë§<b>User ID:</b> {message.from_user.id}\n"
        F"üîóUsername: @{message.from_user.username}\n"
        f"‚úâÔ∏è<b>–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:</b> {message.text}"
    )
    await bot.send_message(chat_id=config.main_group_id, text=message_page)
    await message.answer(text="–û–∂–∏–¥–∞–π—Ç–µ —á–µ–∫ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ...\n"
                         "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.")
    return await state.set_state("message")


@dp.message_handler(state="message")
async def chat(message: Message, state: FSMContext):
    data = await state.get_data()
    deal_id = data.get("deal_id")
    message_page = (
        f"üìç<b>ID –∑–∞—è–≤–∫–∏:</b> {deal_id}\n"
        F"üë§<b>User ID:</b> {message.from_user.id}\n"
        F"üîóUsername: @{message.from_user.username}\n"
        f"‚úâÔ∏è<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {message.text}"
    )
    await bot.send_message(chat_id=config.main_group_id, text=message_page)


async def create_deal(message: Message, state: FSMContext, user: User, send: str,
                      receive: str, method: str, amount: float, content: str, is_technical_task: bool):
    await state.reset_state(with_data=False)
    await User.objects.filter(user_id=message.from_user.id).update(is_chat=True)
    deal = await Deal.objects.create(user=user, send=send, receive=receive, method=method, amount=amount)
    await state.update_data(deal_id=deal.id)
    if is_technical_task:
        await TechnicalTask.objects.create(deal=deal, content=content)
        deal_page = (
            F"üìå<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{deal.pk}</b>\n"
            F"üë§<b>User ID:</b> {message.from_user.id}\n"
            F"üîóUsername: @{message.from_user.username}\n"
            F"‚öôÔ∏è–û–±–º–µ–Ω: {S_CURR_COUPLE.get(send)} ‚ûú {S_CURR_COUPLE.get(receive)}\n"
            F"üí≥–ú–µ—Ç–æ–¥: {method}\n"
            F"üìÉ–¢–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ –∑–∞–¥–∞–Ω–∏–µ: <code>{content}</code>"
        )
    else:
        deal_page = (
            F"üìå<b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ #{deal.pk}</b>\n"
            F"üë§<b>User ID:</b> {message.from_user.id}\n"
            F"üîóUsername: @{message.from_user.username}\n"
            F"‚öôÔ∏è–û–±–º–µ–Ω: {S_CURR_COUPLE.get(send)} ‚ûú {S_CURR_COUPLE.get(receive)}\n"
            F"üí≥–ú–µ—Ç–æ–¥: {method}\n"
            F"üí∞–°—É–º–º–∞: {amount}"
        )
    try:
        await bot.send_message(config.main_group_id, deal_page)
        await message.answer(text="–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞...\n"
                             "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å.", reply_markup=PaymentKB.receipt())
        return await state.set_state("message")
    except BotKicked:
        logger.error(f"Bot kicked from chat: {config.main_group_id}")
        return await message.answer(text="–ü—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞. –î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ...")


async def finish_deal(message: Message, state: FSMContext, deal_id):
    await state.finish()
    user = await User.objects.get(user_id=message.from_user.id)
    await user.update(is_chat=False)
    deal = await Deal.objects.get(id=deal_id)
    if not deal.finished:
        await deal.update(finished=dt.utcnow())
        user_text = f"–ó–∞—è–≤–∫–∞ #{deal.id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        group_text = (
            "–ß–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
            f"–ó–∞—è–≤–∫–∞ <b>#{deal.id}</b> —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
        )
    else:
        user_text = f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–µ #{deal.id}!"
        group_text = f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –∑–∞—è–≤–∫–µ #{deal.id}!"

    await bot.send_message(chat_id=config.main_group_id, text=group_text)
    return await bot.send_message(chat_id=message.from_user.id, text=user_text,
                                  reply_markup=StartKB.start_keyboard())
